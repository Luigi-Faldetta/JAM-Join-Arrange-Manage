name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        continue-on-error: true
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Model selection: Using Claude Sonnet 4 (default) for optimal balance of speed and quality
          # Sonnet 4 is ideal for general coding tasks - faster than Opus with excellent code understanding
          # Uncomment below for Claude Opus 4 if maximum reasoning depth is needed for complex tasks
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Allow Claude to run tests, builds, and common dev commands
          allowed_tools: "Bash(cd client && npm install),Bash(cd client && npm run build),Bash(cd client && npm test),Bash(cd server && npm install),Bash(cd server && npm run build),Bash(cd server && npm test)"
          
          # Custom instructions for JAM project standards
          custom_instructions: |
            This is a TypeScript React + Node.js project with strict standards:
            - Use TypeScript strict mode - no 'any' types
            - Follow functional components with React hooks
            - Use Redux Toolkit for state management
            - Follow TailwindCSS for styling
            - All functions need proper type annotations
            - Write tests for new functionality
            - Follow the existing code patterns and architecture
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

      - name: Handle Claude Failure
        if: failure() && steps.claude.outcome == 'failure'
        run: |
          echo "Claude execution failed. Check the logs above for details."
          echo "This could be due to API rate limits, network issues, or configuration problems."
          echo "The workflow will continue, but manual intervention may be needed."
          exit 0

